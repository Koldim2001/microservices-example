import streamlit as st
from PIL import Image
import cv2
import numpy as np
import requests
import io
import base64

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
CLASSES = ["—Ñ–æ–Ω", "–≤–æ–ª–æ—Å—ã", "–∫–æ–∂–∞"]

def adjust_hsv(image, mask, h_adjust, s_adjust, v_adjust, index):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è HSV –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏, –≥–¥–µ mask == index."""
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HSV
    image_hsv = cv2.cvtColor(image, cv2.COLOR_RGB2HSV).astype(np.float32)
    h, s, v = cv2.split(image_hsv)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –∫ –æ–±–ª–∞—Å—Ç–∏, –≥–¥–µ mask == index
    h[mask == index] = np.clip(h[mask == index] + h_adjust, 0, 179)
    s[mask == index] = np.clip(s[mask == index] + s_adjust, 0, 255)
    v[mask == index] = np.clip(v[mask == index] + v_adjust, 0, 255)
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ HSV –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_hsv_adjusted = cv2.merge([h, s, v])
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_rgb_adjusted = cv2.cvtColor(image_hsv_adjusted.astype(np.uint8), cv2.COLOR_HSV2RGB)
    
    return image_rgb_adjusted

def display_image(image):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    st.image(image, use_container_width=True)

def upload_image(label):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    uploaded_file = st.file_uploader(label, type=['jpg', 'png', 'jpeg'])
    if uploaded_file is not None:
        image_data = np.array(Image.open(uploaded_file))
        return image_data
    return None


st.set_page_config(
    page_title="ML –û–±—Ä–∞–±–æ—á–∏–∫",
    page_icon='üòé',
    layout="wide",
    initial_sidebar_state="expanded",)
    
def image_processing_page():

    st.title('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = upload_image('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if image is not None:
        # –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ HSV
        h_adjust = st.sidebar.slider('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ç–µ–Ω–∫–∞ (H) (-179 –¥–æ 179)', -179, 179, 0)
        s_adjust = st.sidebar.slider('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ (S) (-255 –¥–æ 255)', -255, 255, 0)
        v_adjust = st.sidebar.slider('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è (V) (-255 –¥–æ 255)', -255, 255, 0)

        # –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–∞—Å–∫–µ —Å –ø–æ–º–æ—â—å—é –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        mask_value = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –æ–±–ª–∞—Å—Ç—å', CLASSES)

        # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
        index = CLASSES.index(mask_value)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        image_pil = Image.fromarray(image)
        image_bytes = io.BytesIO()
        image_pil.save(image_bytes, format='PNG')
        image_bytes.seek(0)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Flask API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å–∫–∏
        response = requests.post("http://flask-segmentation-service:5050/infer", files={'image': image_bytes})

        if response.status_code == 200:
            mask_base64 = response.json()['mask']
            mask_bytes = base64.b64decode(mask_base64)
            mask = np.array(Image.open(io.BytesIO(mask_bytes)))

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ HSV
            adjusted_image = adjust_hsv(image, mask, h_adjust, s_adjust, v_adjust, index)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–≤—É—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
            col1, col2, _ = st.columns(3)
            with col1:
                display_image(image)
            with col2:
                display_image(adjusted_image)
        else:
            st.error(f"Request failed with status code {response.status_code}")

def titanic_prediction_page():

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("Titanic Survival Prediction")

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    st.write("Enter the passenger details:")

    # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –±–∏–ª–µ—Ç–∞
    pclass = st.selectbox("Ticket Class (Pclass)", [1, 2, 3])

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —á–∏—Å–ª–æ
    age = st.text_input("Age", value=10)
    if not age.isdigit():
        st.error("Please enter a valid number for Age.")

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —á–∏—Å–ª–æ
    fare = st.text_input("Fare", value=100)
    if not fare.isdigit():
        st.error("Please enter a valid number for Fare.")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    if st.button("Predict"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if age.isdigit() and fare.isdigit():
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            data = {
                "Pclass": int(pclass),
                "Age": float(age),
                "Fare": float(fare)
            }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Flask API
            response = requests.post("http://flask-titanic-service:5000/predict_model", data=data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                prediction = response.json()["prediction"]
                st.success(f"Prediction: {prediction}")
            else:
                st.error(f"Request failed with status code {response.status_code}")
        else:
            st.error("Please fill in all fields with valid numbers.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def main():
    st.sidebar.title("Navigation")
    page = st.sidebar.selectbox("Choose a page", ["Image Processing", "Titanic Prediction"])

    if page == "Image Processing":
        image_processing_page()
    elif page == "Titanic Prediction":
        titanic_prediction_page()

if __name__ == '__main__':
    main()